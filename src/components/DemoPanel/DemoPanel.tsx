import React, { useState } from 'react';
import './DemoPanel.css';
import CardList, { CardListDemo } from '../CardList/CardList';
import ProgressBar, { ProgressBarDemo } from '../ProgressBar/ProgressBar';
import DataTable, { DataTableDemo } from '../DataTable/DataTable';
import Notification, { NotificationDemo } from '../Notification/Notification';
import Chart, { ChartDemo } from '../Chart/Chart';

interface DemoPanelProps {
  componentType: 'CardList' | 'ProgressBar' | 'Notification' | 'DataTable' | 'Chart';
}

const DemoPanel: React.FC<DemoPanelProps> = ({ componentType }) => {
  const [detailLevel, setDetailLevel] = useState(2);
  const [count, setCount] = useState(4);
  const [animationEnabled, setAnimationEnabled] = useState(true);

  const renderComponent = () => {
    switch (componentType) {
      case 'CardList':
        return renderCardList();
      case 'ProgressBar':
        return renderProgressBar();
      case 'DataTable':
        return renderDataTable();
      case 'Notification':
        return renderNotification();
      case 'Chart':
        return renderChart();
      default:
        return null;
    }
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
  const renderPlaceholder = (name: string, icon: string) => {
    return (
      <div className="component-placeholder">
        <div className="placeholder-icon">{icon}</div>
        <h3>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç "{name}" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
        <p>–≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!</p>
      </div>
    );
  };

  const renderCardList = () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–º–æ-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (detailLevel <= 1 || detailLevel >= 3) {
      return <CardListDemo />;
    }
    
    // –î–ª—è —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ 2 –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    try {
      const items = Array(count).fill(null).map((_, i) => ({
        id: `${i + 1}`,
        title: `–ö–∞—Ä—Ç–æ—á–∫–∞ ${i + 1}`,
        content: `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–º–µ—Ä ${i + 1}`,
        icon: ['üìä', 'üìà', 'üì±', 'üíª', 'üîç'][i % 5],
        meta: `–ü—Ä–∏–º–µ—Ä ${i + 1}`
      }));
      
      return <CardList cardItems={items} id="dynamic-card-list" />;
    } catch (error) {
      console.error('Error rendering CardList:', error);
      return <CardListDemo />;
    }
  };

  const renderProgressBar = () => {
    if (detailLevel <= 1) {
      // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
      const value = detailLevel === 0 ? 25 : 75;
      return (
        <ProgressBar 
          value={value} 
          max={100} 
          label="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å" 
          animated={animationEnabled} 
        />
      );
    } else if (detailLevel === 2) {
      // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
      return <ProgressBarDemo />;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ count
      return (
        <div className="progress-bar-demo">
          {Array(count).fill(null).map((_, i) => (
            <ProgressBar 
              key={i}
              value={Math.round(Math.random() * 100)} 
              label={`–ü—Ä–æ–≥—Ä–µ—Å—Å ${i + 1}`} 
              color={['#2196F3', '#4CAF50', '#FF9800', '#F44336', '#9C27B0'][i % 5]}
              animated={animationEnabled}
            />
          ))}
        </div>
      );
    }
  };

  const renderDataTable = () => {
    if (detailLevel <= 1) {
      // –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const columns = [
        { key: 'id', title: 'ID', width: '60px' },
        { key: 'name', title: '–ò–º—è' },
        { key: 'value', title: '–ó–Ω–∞—á–µ–Ω–∏–µ' }
      ];
      
      const data = Array(count).fill(null).map((_, i) => ({
        id: i + 1,
        name: `–≠–ª–µ–º–µ–Ω—Ç ${i + 1}`,
        value: Math.round(Math.random() * 1000)
      }));
      
      return (
        <DataTable 
          title="–ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞" 
          columns={columns} 
          data={data} 
          showPagination={detailLevel === 1}
        />
      );
    } else if (detailLevel === 2) {
      // –î–µ–º–æ-—Ç–∞–±–ª–∏—Ü–∞
      return <DataTableDemo />;
    } else {
      // –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
      const columns = [
        { key: 'id', title: 'ID', width: '60px', sortable: true },
        { key: 'name', title: '–¢–æ–≤–∞—Ä', sortable: true },
        { key: 'category', title: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', sortable: true },
        { key: 'price', title: '–¶–µ–Ω–∞', sortable: true },
        { key: 'stock', title: '–ù–∞ —Å–∫–ª–∞–¥–µ', sortable: true },
        { key: 'rating', title: '–†–µ–π—Ç–∏–Ω–≥', sortable: true }
      ];
      
      const categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–ü—Ä–æ–¥—É–∫—Ç—ã', '–î–æ–º', '–°–ø–æ—Ä—Ç'];
      
      const data = Array(count * 2).fill(null).map((_, i) => ({
        id: i + 1,
        name: `–¢–æ–≤–∞—Ä ${i + 1}`,
        category: categories[i % categories.length],
        price: Math.round(Math.random() * 10000) / 100,
        stock: Math.round(Math.random() * 100),
        rating: (Math.random() * 5).toFixed(1)
      }));
      
      return (
        <DataTable 
          title="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤" 
          columns={columns} 
          data={data} 
          showPagination={true}
          pageSize={detailLevel === 3 ? 5 : 10}
        />
      );
    }
  };

  const renderNotification = () => {
    if (detailLevel === 0) {
      // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      return (
        <Notification
          type="info"
          title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
          message="–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
          closable={true}
          autoClose={false}
        />
      );
    } else if (detailLevel === 1) {
      // –ù–∞–±–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const types = ['info', 'success', 'warning', 'error'];
      return (
        <div className="notification-list">
          {types.map((type, index) => (
            <Notification
              key={index}
              type={type as 'info' | 'success' | 'warning' | 'error'}
              title={`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ ${type}`}
              message={`–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ ${type}`}
              closable={true}
              autoClose={false}
            />
          ))}
        </div>
      );
    } else {
      // –î–µ–º–æ-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      return <NotificationDemo />;
    }
  };

  const renderChart = () => {
    if (detailLevel === 0) {
      // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
      const data = [
        { label: 'A', value: 30 },
        { label: 'B', value: 70 },
        { label: 'C', value: 50 }
      ];
      return (
        <Chart 
          type="bar"
          data={data}
          title="–ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫"
        />
      );
    } else if (detailLevel === 1) {
      // –ì—Ä–∞—Ñ–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ count
      const data = Array(count).fill(null).map((_, i) => ({
        label: String.fromCharCode(65 + i), // A, B, C, ...
        value: Math.round(Math.random() * 100),
        color: ['#2196F3', '#4CAF50', '#FF9800', '#F44336', '#9C27B0'][i % 5]
      }));
      return (
        <Chart
          type="bar"
          data={data}
          title="–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫"
        />
      );
    } else {
      // –î–µ–º–æ-–≥—Ä–∞—Ñ–∏–∫
      return <ChartDemo />;
    }
  };

  return (
    <div className="demo-panel">
      <div className="controls">
        <div className="control-group">
          <label>–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {detailLevel}</label>
          <input
            type="range"
            min="0"
            max="4"
            value={detailLevel}
            onChange={(e) => setDetailLevel(Number(e.target.value))}
          />
        </div>
        <div className="control-group">
          <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {count}</label>
          <input
            type="range"
            min="1"
            max="10"
            value={count}
            onChange={(e) => setCount(Number(e.target.value))}
          />
        </div>
        <div className="control-group">
          <label>
            <input 
              type="checkbox" 
              checked={animationEnabled}
              onChange={(e) => setAnimationEnabled(e.target.checked)}
            />
            –ê–Ω–∏–º–∞—Ü–∏—è
          </label>
        </div>
      </div>
      <div className="component-preview">
        {renderComponent()}
      </div>
    </div>
  );
};

export default DemoPanel; 