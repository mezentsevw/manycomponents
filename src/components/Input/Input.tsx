import React, { useState } from 'react';
import './Input.css';

export interface InputProps {
  type?: 'text' | 'password' | 'email' | 'number' | 'tel' | 'url';
  label?: string;
  placeholder?: string;
  value?: string;
  defaultValue?: string;
  error?: string;
  helperText?: string;
  disabled?: boolean;
  required?: boolean;
  fullWidth?: boolean;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  onChange?: (value: string) => void;
  onBlur?: () => void;
  onFocus?: () => void;
  className?: string;
  name?: string;
  autoComplete?: string;
}

const Input: React.FC<InputProps> = ({
  type = 'text',
  label,
  placeholder,
  value,
  defaultValue,
  error,
  helperText,
  disabled = false,
  required = false,
  fullWidth = false,
  startIcon,
  endIcon,
  onChange,
  onBlur,
  onFocus,
  className = '',
  name,
  autoComplete
}) => {
  const [isFocused, setIsFocused] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange?.(e.target.value);
  };

  const handleFocus = () => {
    setIsFocused(true);
    onFocus?.();
  };

  const handleBlur = () => {
    setIsFocused(false);
    onBlur?.();
  };

  return (
    <div className={`input-wrapper ${fullWidth ? 'full-width' : ''} ${className}`}>
      {label && (
        <label className="input-label">
          {label}
          {required && <span className="input-required">*</span>}
        </label>
      )}
      <div className={`input-container ${error ? 'error' : ''} ${isFocused ? 'focused' : ''} ${disabled ? 'disabled' : ''}`}>
        {startIcon && <span className="input-icon start">{startIcon}</span>}
        <input
          type={type}
          value={value}
          defaultValue={defaultValue}
          placeholder={placeholder}
          disabled={disabled}
          required={required}
          onChange={handleChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className="input-field"
          name={name}
          autoComplete={autoComplete}
        />
        {endIcon && <span className="input-icon end">{endIcon}</span>}
      </div>
      {(error || helperText) && (
        <span className={`input-message ${error ? 'error' : ''}`}>
          {error || helperText}
        </span>
      )}
    </div>
  );
};

// –î–µ–º–æ-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const InputDemo: React.FC = () => {
  const [value, setValue] = useState('');
  const [error, setError] = useState('');

  const handleChange = (newValue: string) => {
    setValue(newValue);
    if (newValue.length < 3) {
      setError('–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
    } else {
      setError('');
    }
  };

  return (
    <div className="input-demo">
      <h2>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Input</h2>
      
      <div className="input-demo-grid">
        <div className="input-demo-group">
          <h3>–¢–∏–ø—ã</h3>
          <div className="input-demo-row">
            <Input type="text" placeholder="–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ" />
            <Input type="password" placeholder="–ü–∞—Ä–æ–ª—å" />
            <Input type="email" placeholder="Email" />
            <Input type="number" placeholder="–ß–∏—Å–ª–æ" />
          </div>
        </div>

        <div className="input-demo-group">
          <h3>–°–æ—Å—Ç–æ—è–Ω–∏—è</h3>
          <div className="input-demo-row">
            <Input label="–û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç" />
            <Input label="–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ" placeholder="Disabled" disabled />
            <Input label="–° –æ—à–∏–±–∫–æ–π" error="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" />
          </div>
        </div>

        <div className="input-demo-group">
          <h3>–° –∏–∫–æ–Ω–∫–∞–º–∏</h3>
          <div className="input-demo-row">
            <Input
              startIcon={<span>üîç</span>}
              placeholder="–ü–æ–∏—Å–∫"
            />
            <Input
              endIcon={<span>‚úì</span>}
              placeholder="–° –∏–∫–æ–Ω–∫–æ–π —Å–ø—Ä–∞–≤–∞"
            />
          </div>
        </div>

        <div className="input-demo-group">
          <h3>–í–∞–ª–∏–¥–∞—Ü–∏—è</h3>
          <div className="input-demo-row">
            <Input
              label="–ü–æ–ª–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"
              value={value}
              onChange={handleChange}
              error={error}
              helperText="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
            />
          </div>
        </div>

        <div className="input-demo-group">
          <h3>Full Width</h3>
          <div className="input-demo-row">
            <Input
              fullWidth
              placeholder="Full width input"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Input; 